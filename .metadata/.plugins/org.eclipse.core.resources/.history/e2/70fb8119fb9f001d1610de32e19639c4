package com.te.blogmanagement.serviceimpl;

import java.time.LocalDateTime;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.te.blogmanagement.dto.BlogUserDto;
import com.te.blogmanagement.entity.BlogUser;
import com.te.blogmanagement.exception.BlogManagementMasterException;
import com.te.blogmanagement.exception.UserNotFoundException;
import com.te.blogmanagement.repository.BlogUserRepository;
import com.te.blogmanagement.service.BlogUserService;

import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class BlogUserServiceImpl implements BlogUserService {

	private final BlogUserRepository blogUserRepository;

	// Access for both user and admin
	// Registration for new user
	@Override
	public BlogUserDto registerNewUser(BlogUserDto blogUserDto) {
		BlogUser blogUser = new BlogUser();
		BeanUtils.copyProperties(blogUserDto, blogUser);
		blogUser.setUserRegisteredAt(LocalDateTime.now());
		blogUserRepository.save(blogUser);
		BeanUtils.copyProperties(blogUser, blogUserDto);
		return blogUserDto;
	}

	// read user by an Id
	@Override
	public BlogUserDto readUserById(Integer userId) {
		BlogUser user = blogUserRepository.findById(userId)
				.orElseThrow(() -> new UserNotFoundException(BlogManagementMasterException.USER_ID_NOT_FOUND));
		BlogUserDto blogUserDto = new BlogUserDto();
		BeanUtils.copyProperties(user, blogUserDto);
		return blogUserDto;
	}

	// update user by its Id
	@Override
	public BlogUser UpdateUserById(BlogUserDto blogUserDto, Integer userId) {
		BlogUser blogUser = blogUserRepository.findById(userId).orElseThrow(() -> new UserNotFoundException(BlogManagementMasterException.USER_ID_NOT_FOUND));

		BeanUtils.copyProperties(blogUserDto, blogUser);
		blogUser.setBlogUserId(userId);
		BeanUtils.copyProperties(blogUser, blogUserDto);
		return blogUserRepository.save(blogUser);
	}

	// delete
	@Override
	public boolean deleteUserById(Integer userId) {
		BlogUser user = blogUserRepository.findById(userId)
				.orElseThrow(() -> new UserNotFoundException(BlogManagementMasterException.USER_ID_NOT_FOUND));

		if (user != null) {
			blogUserRepository.deleteById(userId);
			return true;
		} else {
			return false;
		}
	}

	@Override
	public void userLogout(Integer userId) {
		BlogUser blogUser = blogUserRepository.findById(userId).get();
		blogUser.setUserLastLogin(LocalDateTime.now());
		blogUserRepository.save(blogUser);
	}

}
