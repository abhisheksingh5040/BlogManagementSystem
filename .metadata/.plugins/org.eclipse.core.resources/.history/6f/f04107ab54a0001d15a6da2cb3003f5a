package com.te.blogmanagement.controller;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.te.blogmanagement.dto.BlogCategoryDto;
import com.te.blogmanagement.dto.BlogCategoryViewDto;
import com.te.blogmanagement.dto.BlogPostCommentDto;
import com.te.blogmanagement.dto.BlogPostViewByIdDto;
import com.te.blogmanagement.dto.BlogPostViewDto;
import com.te.blogmanagement.dto.BlogTagDto;
import com.te.blogmanagement.dto.BlogTagViewDto;
import com.te.blogmanagement.entity.BlogPostComment;
import com.te.blogmanagement.response.CategoryResponse;
import com.te.blogmanagement.response.PostResponse;
import com.te.blogmanagement.response.TagResponse;
import com.te.blogmanagement.service.BlogCategoryService;
import com.te.blogmanagement.service.BlogPostCommentService;
import com.te.blogmanagement.service.BlogPostService;
import com.te.blogmanagement.service.BlogTagService;
import com.te.blogmanagement.service.BlogViewService;

import io.swagger.v3.oas.annotations.Operation;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Controller
@RequestMapping("/v1/view")
public class BlogViewController {
	@Autowired
	private BlogViewService blogViewService;
	
	@Autowired
	private PostResponse postResponse;

	@Autowired
	private TagResponse tagResponse;
	
	@Autowired
	private CategoryResponse categoryResponse;
	
	@Operation(summary = "get all the post")
	@GetMapping("/getAllPosts")
	public ResponseEntity<List<BlogPostViewDto>> getAllPosts() {
		List<BlogPostViewDto> blogPostViewDtos = blogViewService.getAllPosts();
		return new ResponseEntity<>(blogPostViewDtos, HttpStatus.OK);
	}

	@Operation(summary = "get post by Id")
	@GetMapping("/getPostById/{postId}")
	public ResponseEntity<BlogPostViewByIdDto> getPostById(@PathVariable Integer postId) {
		BlogPostViewByIdDto blogPostViewByIdDto = blogViewService.getPostById(postId);
		if (blogPostViewByIdDto != null) {
			return new ResponseEntity<>(blogPostViewByIdDto, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@Operation(summary= "To get all the tag")
	@GetMapping("/getAlltags")
	//@RequestBody
	public ResponseEntity<List<BlogTagDto>> getAllTags() {
		List<BlogTagDto> blogTagDtos = blogViewService.getAllTags();
		return new ResponseEntity<>(blogTagDtos, HttpStatus.OK);
	}
	
	@Operation(summary="To get tag by using an Id")
	@GetMapping("/getTagById/{tagId}")
	public ResponseEntity<BlogTagViewDto> getTagById(@PathVariable Integer tagId) {
		BlogTagViewDto blogTagViewDto = blogViewService.getTagById(tagId);
		return new ResponseEntity<>(blogTagViewDto, HttpStatus.OK);
	}
	
	@Operation(summary="get a category by Id")
	@GetMapping("/getCategoryById/{categoryId}")
	public ResponseEntity<BlogCategoryViewDto> readCategoryById(@PathVariable Integer categoryId) {
		BlogCategoryViewDto blogCategoryViewDto = blogViewService.getCategoryById(categoryId);
		return new ResponseEntity<>(blogCategoryViewDto, HttpStatus.OK);
	}

    @Operation(summary="To get all the categories")
	@GetMapping("/getAllCategories")
	public ResponseEntity<List<BlogCategoryDto>> getAllCategories() {
		List<BlogCategoryDto> blogCategoryDto = blogViewService.getAllCategories();
		return new ResponseEntity<>(blogCategoryDto, HttpStatus.OK);
	}
    
    @Operation(summary="add a comment by using user id")
    @PostMapping("addCommentToPost/{postId}")
	public ResponseEntity<BlogPostCommentDto> addCommentToPost(@RequestBody BlogPostCommentDto blogPostCommentDto,
			@PathVariable Integer postId) {
		BlogPostComment blogPostComment = blogViewService.addCommentToPost(blogPostCommentDto, postId);
		BeanUtils.copyProperties(blogPostComment, blogPostCommentDto);
		return new ResponseEntity<BlogPostCommentDto>(blogPostCommentDto,HttpStatus.CREATED);
	}
}
